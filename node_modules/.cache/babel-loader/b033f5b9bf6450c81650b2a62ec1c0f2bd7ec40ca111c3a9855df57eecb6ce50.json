{"ast":null,"code":"import _toConsumableArray from \"/Users/aaronengelmann/Desktop/Main_Folder/Code/themoseseye/frontend_react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/aaronengelmann/Desktop/Main_Folder/Code/themoseseye/frontend_react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/aaronengelmann/Desktop/Main_Folder/Code/themoseseye/frontend_react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"autoplay\", \"delay\", \"driver\", \"keyframes\", \"type\", \"repeat\", \"repeatDelay\", \"repeatType\", \"onPlay\", \"onStop\", \"onComplete\", \"onUpdate\"];\nimport { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nvar types = {\n  decay: inertia,\n  inertia: inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring: spring\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nvar maxDuration = 20000;\nfunction calculateDuration(generator) {\n  var duration = 0;\n  var timeStep = 50;\n  var state = generator.next(duration);\n  while (!state.done && duration < maxDuration) {\n    duration += timeStep;\n    state = generator.next(duration);\n  }\n  return duration >= maxDuration ? Infinity : duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue(_ref) {\n  var _ref$autoplay = _ref.autoplay,\n    autoplay = _ref$autoplay === void 0 ? true : _ref$autoplay,\n    _ref$delay = _ref.delay,\n    delay = _ref$delay === void 0 ? 0 : _ref$delay,\n    _ref$driver = _ref.driver,\n    driver = _ref$driver === void 0 ? frameloopDriver : _ref$driver,\n    keyframes$1 = _ref.keyframes,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? \"keyframes\" : _ref$type,\n    _ref$repeat = _ref.repeat,\n    repeat = _ref$repeat === void 0 ? 0 : _ref$repeat,\n    _ref$repeatDelay = _ref.repeatDelay,\n    repeatDelay = _ref$repeatDelay === void 0 ? 0 : _ref$repeatDelay,\n    _ref$repeatType = _ref.repeatType,\n    repeatType = _ref$repeatType === void 0 ? \"loop\" : _ref$repeatType,\n    onPlay = _ref.onPlay,\n    onStop = _ref.onStop,\n    onComplete = _ref.onComplete,\n    onUpdate = _ref.onUpdate,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var speed = 1;\n  var hasStopped = false;\n  var resolveFinishedPromise;\n  var currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n  var updateFinishedPromise = function updateFinishedPromise() {\n    resolveFinishedPromise && resolveFinishedPromise();\n    currentFinishedPromise = new Promise(function (resolve) {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  var animationDriver;\n  var generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n  var mapNumbersToKeyframes;\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n  var generator = generatorFactory(_objectSpread(_objectSpread({}, options), {}, {\n    keyframes: keyframes$1\n  }));\n  var mirroredGenerator;\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory(_objectSpread(_objectSpread({}, options), {}, {\n      keyframes: _toConsumableArray(keyframes$1).reverse(),\n      velocity: -(options.velocity || 0)\n    }));\n  }\n  var playState = \"idle\";\n  var holdTime = null;\n  var startTime = null;\n  var cancelTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calculateDuration(generator);\n  }\n  var calculatedDuration = generator.calculatedDuration;\n  var resolvedDuration = Infinity;\n  var totalDuration = Infinity;\n  if (calculatedDuration !== null) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n  var currentTime = 0;\n  var tick = function tick(timestamp) {\n    if (startTime === null) return;\n    /**\n     * requestAnimationFrame timestamps can come through as lower than\n     * the startTime as set by performance.now(). Here we prevent this,\n     * though in the future it could be possible to make setting startTime\n     * a pending operation that gets resolved here.\n     */\n    if (speed > 0) startTime = Math.min(startTime, timestamp);\n    if (holdTime !== null) {\n      currentTime = holdTime;\n    } else {\n      currentTime = (timestamp - startTime) * speed;\n    }\n    // Rebase on delay\n    var timeWithoutDelay = currentTime - delay;\n    var isInDelayPhase = timeWithoutDelay < 0;\n    currentTime = Math.max(timeWithoutDelay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n    if (playState === \"finished\" && holdTime === null) {\n      currentTime = totalDuration;\n    }\n    var elapsed = currentTime;\n    var frameGenerator = generator;\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      var progress = currentTime / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n      var currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n      var iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n      iterationProgress === 1 && currentIteration--;\n      currentIteration = Math.min(currentIteration, repeat + 1);\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n      var iterationIsOdd = Boolean(currentIteration % 2);\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n      var p = clamp(0, 1, iterationProgress);\n      if (currentTime > totalDuration) {\n        p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n      }\n      elapsed = p * resolvedDuration;\n    }\n    /**\n     * If we're in negative time, set state as the initial keyframe.\n     * This prevents delay: x, duration: 0 animations from finishing\n     * instantly.\n     */\n    var state = isInDelayPhase ? {\n      done: false,\n      value: keyframes$1[0]\n    } : frameGenerator.next(elapsed);\n    if (mapNumbersToKeyframes) {\n      state.value = mapNumbersToKeyframes(state.value);\n    }\n    var done = state.done;\n    if (!isInDelayPhase && calculatedDuration !== null) {\n      done = currentTime >= totalDuration;\n    }\n    var isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done || speed < 0 && currentTime <= 0);\n    if (onUpdate) {\n      onUpdate(state.value);\n    }\n    if (isAnimationFinished) {\n      finish();\n    }\n    return state;\n  };\n  var stopAnimationDriver = function stopAnimationDriver() {\n    animationDriver && animationDriver.stop();\n    animationDriver = undefined;\n  };\n  var _cancel = function cancel() {\n    playState = \"idle\";\n    stopAnimationDriver();\n    updateFinishedPromise();\n    startTime = cancelTime = null;\n  };\n  var finish = function finish() {\n    playState = \"finished\";\n    onComplete && onComplete();\n    stopAnimationDriver();\n    updateFinishedPromise();\n  };\n  var play = function play() {\n    if (hasStopped) return;\n    if (!animationDriver) animationDriver = driver(tick);\n    var now = animationDriver.now();\n    onPlay && onPlay();\n    playState = \"running\";\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime) {\n      // TODO When implementing play/pause, check WAAPI\n      // logic around finished animations\n      startTime = now;\n    }\n    cancelTime = startTime;\n    holdTime = null;\n    animationDriver.start();\n  };\n  if (autoplay) {\n    play();\n  }\n  var controls = {\n    then: function then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(currentTime);\n    },\n    set time(newTime) {\n      newTime = secondsToMilliseconds(newTime);\n      currentTime = newTime;\n      if (holdTime !== null || !animationDriver || speed === 0) {\n        holdTime = newTime;\n      } else {\n        startTime = animationDriver.now() - newTime / speed;\n      }\n    },\n    get duration() {\n      var duration = generator.calculatedDuration === null ? calculateDuration(generator) : generator.calculatedDuration;\n      return millisecondsToSeconds(duration);\n    },\n    get speed() {\n      return speed;\n    },\n    set speed(newSpeed) {\n      if (newSpeed === speed || !animationDriver) return;\n      speed = newSpeed;\n      controls.time = millisecondsToSeconds(currentTime);\n    },\n    get state() {\n      return playState;\n    },\n    play: play,\n    pause: function pause() {\n      playState = \"paused\";\n      holdTime = currentTime;\n    },\n    stop: function stop() {\n      hasStopped = true;\n      if (playState === \"idle\") return;\n      playState = \"idle\";\n      onStop && onStop();\n      _cancel();\n    },\n    cancel: function cancel() {\n      if (cancelTime !== null) tick(cancelTime);\n      _cancel();\n    },\n    complete: function complete() {\n      playState = \"finished\";\n    },\n    sample: function sample(elapsed) {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\nexport { animateValue };","map":{"version":3,"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","types","decay","tween","maxDuration","calculateDuration","generator","duration","timeStep","state","next","done","Infinity","animateValue","_ref","_ref$autoplay","autoplay","_ref$delay","delay","_ref$driver","driver","keyframes$1","_ref$type","type","_ref$repeat","repeat","_ref$repeatDelay","repeatDelay","_ref$repeatType","repeatType","onPlay","onStop","onComplete","onUpdate","options","_objectWithoutProperties","_excluded","speed","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","_objectSpread","mirroredGenerator","_toConsumableArray","reverse","velocity","playState","holdTime","startTime","cancelTime","calculatedDuration","resolvedDuration","totalDuration","currentTime","tick","timestamp","Math","min","timeWithoutDelay","isInDelayPhase","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","Boolean","p","value","isAnimationFinished","finish","stopAnimationDriver","stop","undefined","cancel","play","now","start","controls","then","reject","time","newTime","newSpeed","pause","complete","sample"],"sources":["/Users/aaronengelmann/Desktop/Main_Folder/Code/themoseseye/frontend_react/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs"],"sourcesContent":["import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nfunction calculateDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxDuration ? Infinity : duration;\n}\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calculateDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            currentTime = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay;\n        const isInDelayPhase = timeWithoutDelay < 0;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = currentTime >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && currentTime <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        playState = \"running\";\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime) {\n            // TODO When implementing play/pause, check WAAPI\n            // logic around finished animations\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calculateDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}